
library(edgeR)
library(DESeq2)
library(dplyr)
library(magrittr)
library(ggplot2)
require(gridExtra)
library(broman)

#Normalization codes
Normalize <- function(counts, conditions, norm.method="QN")
{
  #Quantile Normalization
  if(norm.method=="QN"){
    require(preprocessCore)
    norm.counts <- normalize.quantiles(as.matrix(counts))
    colnames(norm.counts) <- colnames(counts)
    rownames(norm.counts) <- rownames(counts)
    return(norm.counts)
  }
  else if(norm.method=="limmaQN"){
    #Quantile Normalization
    require(limma)
    counts.log.dat=log2(counts+0.5)
    norm.counts=normalizeBetweenArrays(counts.log.dat,method='quantile')
    colnames(norm.counts) <- colnames(counts)
    return(norm.counts)
  }
  
  #TMM Normalization
  else if(norm.method=="TMM"){
    require(edgeR)
    LS <- apply(counts, 2, sum)
    v  <- calcNormFactors(y, method="TMM")$samples[,3]*LS
    norm.counts <- matrix(NA, ncol=ncol(counts), nrow=nrow(counts))
    for(i in 1:ncol(counts)){
      norm.counts[, i] <- counts[,i]/v[i]*1e6
    }
    colnames(norm.counts) <- colnames(counts)    
    return(norm.counts)
  }
  
  #DESeq Normalization
  else if(norm.method=="DESeq"){
    require(DESeq)
    cds <- newCountDataSet(counts, conditions)
    ## estimate size factor
    cds <- estimateSizeFactors(cds)
    norm.counts <- counts(cds, normalized=TRUE)
    colnames(norm.counts) <- colnames(counts)
    return(norm.counts)
  }
  
  #PoissonSeq normalization
  else if(norm.method=="PoissonSeq"){
    require(PoissonSeq)
    seq.depth <- PS.Est.Depth(counts, ct.sum=1, ct.mean=0)
    norm.counts <- counts
    for(i in 1:ncol(counts)){
      norm.counts[,i] <- counts[,i]/seq.depth[i]
    }
    colnames(norm.counts) <- colnames(counts)
    return(norm.counts)
  }
  
  #SAMSeq normalization
  else if(norm.method=="SAMSeq"){
    require(samr)
    x <- counts
    y <- ifelse(conditions=="condA",1,2)  
    samfit <- SAMseq(x, y, geneid=rownames(counts), resp.type="Two class unpaired", fdr.output=1.0)    
    ls <-apply(counts, 2, sum)
    depth <- samfit$samr.obj$depth
    require(psych)
    gm <- geometric.mean(depth)
    factor <- diag(gm/depth)
    norm.counts <- as.matrix(x)%*%factor
    colnames(norm.counts) <- colnames(counts)
    return(norm.counts)
  }
}

#A function that computes gene wise group specific CV
  CV <- function(counts, group){
    group=as.factor(group)  
    CV <- apply(counts, 1, function(x) {
      c(sd(x[group==levels(group)[1]])/mean(x[group==levels(group)[1]]), 
        sd(x[group==levels(group)[2]])/mean(x[group==levels(group)[2]]))
    })   
    CV <- as.data.frame(t(CV))
    colnames(CV) <- levels(group)
    return(CV)
  }

#Moderated t-test
limma.test <- function(counts, group, alpha=0.05){
  require(limma)
  # Create model matrix and set up dge object
  design <- model.matrix(~group)
  # Quantile normalization  
  counts.log.dat=log2(counts+0.5)
  #counts.log.dat=normalizeBetweenArrays(counts.log.dat, method='none')
  
  # Test for differential expression
  fit <- lmFit(counts.log.dat, design)
  fit <- eBayes(fit)
  
  # Return top table
  de_table <- topTable(fit, coef=ncol(design), n=nrow(counts.log.dat), sort.by="none")
  res <- as.data.frame(de_table)
  res$Genes <- rownames(res)
  res <- res[,c(1,2,4,5,7)]
  colnames(res) <- c("LFC", "Mean", "pval", "adjp", "Genes")
  res$adjp[is.na(res$adjp)] <- 1
  res$class <- ifelse(res$adjp<alpha, 1, 0)
  return(res)
}


#--------------------------------------------------------------------------------------------------#
#Loading Datasets
##Loading NB dataset
Zhang <- readRDS("data/Zhang_Data_20and20.RData")
counts.Zhang <- Zhang$counts ; colnames(counts.Zhang) <- paste0(rep(c("A", "B"), each=20), c(1:20, 1:20))
group.Zhang  <- Zhang$group
mRNA.Zhang   <- Zhang$mRNA   ; mRNA.Zhang <- rownames(counts.Zhang)[which(rownames(counts.Zhang) %in% mRNA.Zhang)]
lncRNA.Zhang <- Zhang$lncRNA ; lncRNA.Zhang <- rownames(counts.Zhang)[which(rownames(counts.Zhang) %in% lncRNA.Zhang)]

##Loading NGP Nutlin ataset
NGP_NUT <- readRDS("data/celine_neuroblastoma_data.RData")
counts.NGP <- NGP_NUT$counts ; counts.NGP <- counts.NGP[which(rowSums(counts.NGP[, 1:10])>0 & rowSums(counts.NGP[, 11:20])>0), ]
colnames(counts.NGP) <- paste0(rep(c("A", "B"), each=10), c(1:10, 1:10))
group.NGP  <- NGP_NUT$group  ; group.NGP <- ifelse(group.NGP=="Ethanol", "condA", "condB") ; group.NGP <- as.factor(group.NGP)
mRNA.NGP   <- NGP_NUT$mRNA   ; mRNA.NGP <- rownames(counts.NGP)[which(rownames(counts.NGP) %in% mRNA.NGP)]
lncRNA.NGP <- NGP_NUT$lncRNA ; lncRNA.NGP <- rownames(counts.NGP)[which(rownames(counts.NGP) %in% lncRNA.NGP)]

##Loading CRC AZAdataset
CRC <- readRDS("data/CRC_AZA_Data.RData")
counts.CRC <- CRC$counts ; counts.CRC <- counts.CRC[which(rowSums(counts.CRC[, 1:3])>0 & rowSums(counts.CRC[, 4:6])>0), ]
group.CRC  <- CRC$group


##Loading Hammer Dataset
Hammer <- readRDS("data/Hammer_data.RData")
counts.Hammer <- Hammer$counts ; counts.Hammer <- counts.Hammer[which(rowSums(counts.Hammer[, 1:2])>0 & rowSums(counts.Hammer[, 3:4])>0), ]
group.Hammer  <- Hammer$group

##Loading Bottomly Dataset
Bottomly <- readRDS("data/Bottomly_data.RData")
counts.Bottomly <- Bottomly$counts ; counts.Bottomly <- counts.Bottomly[which(rowSums(counts.Bottomly[, 1:10])>0 & rowSums(counts.Bottomly[, 11:21])>0), ]
group.Bottomly  <- Bottomly$group

##Loading GTEx Dataset
GTEx <- readRDS("data/GTEx_Data_20and20.RData")
counts.GTEx <- GTEx$counts ; counts.GTEx <- counts.GTEx[which(rowSums(counts.GTEx[, 1:20])>0 & rowSums(counts.GTEx[, 21:40])>0), ]
group.GTEx  <- GTEx$group


#--------------------------------------------------------------------------------------------------#
#Normalizing Counts

QN.counts.Zhang          <- Normalize(counts.Zhang, group.Zhang, norm.method="QN")
TMM.counts.Zhang         <- Normalize(counts.Zhang, group.Zhang, norm.method="TMM")
DESeq.counts.Zhang       <- Normalize(counts.Zhang, group.Zhang, norm.method="DESeq")
PoissonSeq.counts.Zhang  <- Normalize(counts.Zhang, group.Zhang, norm.method="PoissonSeq")
SAMSeq.counts.Zhang      <- Normalize(counts.Zhang, group.Zhang, norm.method="SAMSeq")

QN.counts.NGP          <- Normalize(counts.NGP, group.NGP, norm.method="QN")
TMM.counts.NGP         <- Normalize(counts.NGP, group.NGP, norm.method="TMM")
DESeq.counts.NGP       <- Normalize(counts.NGP, group.NGP, norm.method="DESeq")
PoissonSeq.counts.NGP  <- Normalize(counts.NGP, group.NGP, norm.method="PoissonSeq")
SAMSeq.counts.NGP      <- Normalize(counts.NGP, group.NGP, norm.method="SAMSeq")

QN.counts.CRC          <- Normalize(counts.CRC, group.CRC, norm.method="QN")
TMM.counts.CRC         <- Normalize(counts.CRC, group.CRC, norm.method="TMM")
DESeq.counts.CRC       <- Normalize(counts.CRC, group.CRC, norm.method="DESeq")
PoissonSeq.counts.CRC  <- Normalize(counts.CRC, group.CRC, norm.method="PoissonSeq")
SAMSeq.counts.CRC      <- Normalize(counts.CRC, group.CRC, norm.method="SAMSeq")

QN.counts.Hammer          <- Normalize(counts.Hammer, group.Hammer, norm.method="QN")
TMM.counts.Hammer         <- Normalize(counts.Hammer, group.Hammer, norm.method="TMM")
DESeq.counts.Hammer       <- Normalize(counts.Hammer, group.Hammer, norm.method="DESeq")
PoissonSeq.counts.Hammer  <- Normalize(counts.Hammer, group.Hammer, norm.method="PoissonSeq")
SAMSeq.counts.Hammer      <- Normalize(counts.Hammer, group.Hammer, norm.method="SAMSeq")

QN.counts.Bottomly          <- Normalize(counts.Bottomly, group.Bottomly, norm.method="QN")
TMM.counts.Bottomly         <- Normalize(counts.Bottomly, group.Bottomly, norm.method="TMM")
DESeq.counts.Bottomly       <- Normalize(counts.Bottomly, group.Bottomly, norm.method="DESeq")
PoissonSeq.counts.Bottomly  <- Normalize(counts.Bottomly, group.Bottomly, norm.method="PoissonSeq")
SAMSeq.counts.Bottomly      <- Normalize(counts.Bottomly, group.Bottomly, norm.method="SAMSeq")

QN.counts.GTEx          <- Normalize(counts.GTEx, group.GTEx, norm.method="QN")
TMM.counts.GTEx         <- Normalize(counts.GTEx, group.GTEx, norm.method="TMM")
DESeq.counts.GTEx       <- Normalize(counts.GTEx, group.GTEx, norm.method="DESeq")
PoissonSeq.counts.GTEx  <- Normalize(counts.GTEx, group.GTEx, norm.method="PoissonSeq")
SAMSeq.counts.GTEx      <- Normalize(counts.GTEx, group.GTEx, norm.method="SAMSeq")

#--------------------------------------------------------------------------------------------------#
#Distribution of counts before and after normalizations

win.graph()
par(mfrow=c(2,3))
boxplot(log2(counts.Zhang+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=20),
        main="Raw Counts", ylim=c(0, 20))
boxplot(log2(QN.counts.Zhang+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=20),
        main="Quantile normalization", ylim=c(0, 20))
boxplot(log2(TMM.counts.Zhang+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=20),
        main="TMM normalization", ylim=c(0, 20))
boxplot(log2(DESeq.counts.Zhang+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=20),
        main="DESeq normalization", ylim=c(0, 20))
boxplot(log2(PoissonSeq.counts.Zhang+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=20),
        main="PoissonSeq normalization", ylim=c(0, 20))
boxplot(log2(SAMSeq.counts.Zhang+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=20),
        main="SAMSeq normalization", ylim=c(0, 20))

win.graph()
par(mfrow=c(2,3))

boxplot(log2(counts.NGP+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=10),
        main="Raw Counts", ylim=c(0, 20))
boxplot(log2(QN.counts.NGP+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=10),
        main="Quantile normalization", ylim=c(0, 20))
boxplot(log2(TMM.counts.NGP+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=10),
        main="TMM normalization", ylim=c(0, 20))
boxplot(log2(DESeq.counts.NGP+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=10),
        main="DESeq normalization", ylim=c(0, 20))
boxplot(log2(PoissonSeq.counts.NGP+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=10),
        main="PoissonSeq normalization", ylim=c(0, 20))
boxplot(log2(SAMSeq.counts.NGP+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=10),
        main="SAMSeq normalization", ylim=c(0, 20))


win.graph()
par(mfrow=c(2,3))

boxplot(log2(counts.CRC+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=3),
        main="Raw Counts", ylim=c(0, 20))
boxplot(log2(QN.counts.CRC+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=3),
        main="Quantile normalization", ylim=c(0, 20))
boxplot(log2(TMM.counts.CRC+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=3),
        main="TMM normalization", ylim=c(0, 20))
boxplot(log2(DESeq.counts.CRC+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=3),
        main="DESeq normalization", ylim=c(0, 20))
boxplot(log2(PoissonSeq.counts.CRC+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=3),
        main="PoissonSeq normalization", ylim=c(0, 20))
boxplot(log2(SAMSeq.counts.CRC+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), each=3),
        main="SAMSeq normalization", ylim=c(0, 20))

win.graph()
par(mfrow=c(2,3))
boxplot(log2(counts.Hammer+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(2, 2)),
        main="Raw Counts", ylim=c(0, 20))
boxplot(log2(QN.counts.Hammer+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(2, 2)),
        main="Quantile normalization", ylim=c(0, 20))
boxplot(log2(TMM.counts.Hammer+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(2, 2)),
        main="TMM normalization", ylim=c(0, 20))
boxplot(log2(DESeq.counts.Hammer+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(2, 2)),
        main="DESeq normalization", ylim=c(0, 20))
boxplot(log2(PoissonSeq.counts.Hammer+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(2, 2)),
        main="PoissonSeq normalization", ylim=c(0, 20))
boxplot(log2(SAMSeq.counts.Hammer+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(2, 2)),
        main="SAMSeq normalization", ylim=c(0, 20))

win.graph()
par(mfrow=c(2,3))

boxplot(log2(counts.Bottomly+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(10, 11)),
        main="Raw Counts", ylim=c(0, 20))
boxplot(log2(QN.counts.Bottomly+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(10, 11)),
        main="Quantile normalization", ylim=c(0, 20))
boxplot(log2(TMM.counts.Bottomly+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(10, 11)),
        main="TMM normalization", ylim=c(0, 20))
boxplot(log2(DESeq.counts.Bottomly+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(10, 11)),
        main="DESeq normalization", ylim=c(0, 20))
boxplot(log2(PoissonSeq.counts.Bottomly+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(10, 11)),
        main="PoissonSeq normalization", ylim=c(0, 20))
boxplot(log2(SAMSeq.counts.Bottomly+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(10, 11)),
        main="SAMSeq normalization", ylim=c(0, 20))

win.graph()
par(mfrow=c(2,3))

boxplot(log2(counts.GTEx+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(20, 20)),
        main="Raw Counts", ylim=c(0, 20))
boxplot(log2(QN.counts.GTEx+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(20, 20)),
        main="Quantile normalization", ylim=c(0, 20))
boxplot(log2(TMM.counts.GTEx+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(20, 20)),
        main="TMM normalization", ylim=c(0, 20))
boxplot(log2(DESeq.counts.GTEx+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(20, 20)),
        main="DESeq normalization", ylim=c(0, 20))
boxplot(log2(PoissonSeq.counts.GTEx+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(20, 20)),
        main="PoissonSeq normalization", ylim=c(0, 20))
boxplot(log2(SAMSeq.counts.GTEx+1), xlab="samples", ylab="log2(counts + 1)", cex.lab=1.5, col=rep(c("lightblue4", "lightcoral"), c(20, 20)),
        main="SAMSeq normalization", ylim=c(0, 20))
        
 
 #------------------------------------------------------------------------------------------------
 #Distribution of empirical CV of genes
 ##For Zhang dataste
  CV.counts.Zhang            <- CV(counts.Zhang, group.Zhang)
  CV.QN.counts.Zhang         <- CV(QN.counts.Zhang, group.Zhang)
  CV.TMM.counts.Zhang        <- CV(TMM.counts.Zhang, group.Zhang)
  CV.DESeq.counts.Zhang      <- CV(DESeq.counts.Zhang, group.Zhang)
  CV.PoissonSeq.counts.Zhang <- CV(PoissonSeq.counts.Zhang, group.Zhang)
  CV.SAMSeq.counts.Zhang     <- CV(SAMSeq.counts.Zhang, group.Zhang)

  CV.Zhang <- rbind(CV.counts.Zhang, CV.QN.counts.Zhang, CV.TMM.counts.Zhang, CV.DESeq.counts.Zhang,
                    CV.PoissonSeq.counts.Zhang, CV.SAMSeq.counts.Zhang)
  CV.Zhang$norm.methods <- factor(rep(c("Raw Count", "QN", "TMM", "DESeq", "PoissonSeq", "SAMSeq"),
                                      c(nrow(CV.counts.Zhang), nrow(CV.QN.counts.Zhang), nrow(CV.TMM.counts.Zhang), 
                                        nrow(CV.DESeq.counts.Zhang), nrow(CV.PoissonSeq.counts.Zhang),
                                        nrow(CV.SAMSeq.counts.Zhang))))
  
  win.graph()
  CV.Zhang$norm.methods.A <- sortLvlsByVar.fnc(CV.Zhang$norm.methods, CV.Zhang$condA)
  p <- ggplot(CV.Zhang, aes(x=norm.methods.A, y=condA))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15)) +ylim(0, 2)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("MYCN not amplified")
  plot1 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  
  CV.Zhang$norm.methods.B <- sortLvlsByVar.fnc(CV.Zhang$norm.methods, CV.Zhang$condB)
  p <- ggplot(CV.Zhang, aes(x=norm.methods.B, y=condB))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 2)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("MYCN amplified")
  plot2 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  grid.arrange(plot1, plot2, ncol=2)
  
  ##For NGP dataste
  CV.counts.NGP            <- CV(counts.NGP, group.NGP)
  CV.QN.counts.NGP         <- CV(QN.counts.NGP, group.NGP)
  CV.TMM.counts.NGP        <- CV(TMM.counts.NGP, group.NGP)
  CV.DESeq.counts.NGP      <- CV(DESeq.counts.NGP, group.NGP)
  CV.PoissonSeq.counts.NGP <- CV(PoissonSeq.counts.NGP, group.NGP)
  CV.SAMSeq.counts.NGP     <- CV(SAMSeq.counts.NGP, group.NGP)
  
  CV.NGP <- rbind(CV.counts.NGP, CV.QN.counts.NGP, CV.TMM.counts.NGP, CV.DESeq.counts.NGP,
                  CV.PoissonSeq.counts.NGP, CV.SAMSeq.counts.NGP)
  CV.NGP$norm.methods <- factor(rep(c("Raw Count", "QN", "TMM", "DESeq", "PoissonSeq", "SAMSeq"),
                                    c(nrow(CV.counts.NGP), nrow(CV.QN.counts.NGP), nrow(CV.TMM.counts.NGP), 
                                      nrow(CV.DESeq.counts.NGP), nrow(CV.PoissonSeq.counts.NGP),
                                      nrow(CV.SAMSeq.counts.NGP))))

  win.graph()
  CV.NGP$norm.methods.A <- sortLvlsByVar.fnc(CV.NGP$norm.methods, CV.NGP$condA)
  p <- ggplot(CV.NGP, aes(x=norm.methods.A, y=condA))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 2)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("Ethanol")
  plot1 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  
  CV.NGP$norm.methods.B <- sortLvlsByVar.fnc(CV.NGP$norm.methods, CV.NGP$condB)
  p <- ggplot(CV.NGP, aes(x=norm.methods.B, y=condB))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 2)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("Nutlin-3")
  plot2 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  grid.arrange(plot1, plot2, ncol=2)
  
  ##For CRC dataste
  CV.counts.CRC            <- CV(counts.CRC, group.CRC)
  CV.QN.counts.CRC         <- CV(QN.counts.CRC, group.CRC)
  CV.TMM.counts.CRC        <- CV(TMM.counts.CRC, group.CRC)
  CV.DESeq.counts.CRC      <- CV(DESeq.counts.CRC, group.CRC)
  CV.PoissonSeq.counts.CRC <- CV(PoissonSeq.counts.CRC, group.CRC)
  CV.SAMSeq.counts.CRC     <- CV(SAMSeq.counts.CRC, group.CRC)
  
  CV.CRC <- rbind(CV.counts.CRC, CV.QN.counts.CRC, CV.TMM.counts.CRC, CV.DESeq.counts.CRC,
                  CV.PoissonSeq.counts.CRC, CV.SAMSeq.counts.CRC)
  CV.CRC$norm.methods <- factor(rep(c("Raw Count", "QN", "TMM", "DESeq", "PoissonSeq", "SAMSeq"),
                                    c(nrow(CV.counts.CRC), nrow(CV.QN.counts.CRC), nrow(CV.TMM.counts.CRC), 
                                      nrow(CV.DESeq.counts.CRC), nrow(CV.PoissonSeq.counts.CRC),
                                      nrow(CV.SAMSeq.counts.CRC))))

  library(ggplot2)
  win.graph()
  CV.CRC$norm.methods.A <- sortLvlsByVar.fnc(CV.CRC$norm.methods, CV.CRC$condA)
  p <- ggplot(CV.CRC, aes(x=norm.methods.A, y=condA))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 0.5)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("Control")
  plot1 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  
  CV.CRC$norm.methods.B <- sortLvlsByVar.fnc(CV.CRC$norm.methods, CV.CRC$condB)
  p <- ggplot(CV.CRC, aes(x=norm.methods.B, y=condB))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 0.5)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("Treatd with AZA")
  plot2 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  grid.arrange(plot1, plot2, ncol=2)
  
  
  ##For Hammer dataste
  CV.counts.Hammer            <- CV(counts.Hammer, group.Hammer)
  CV.QN.counts.Hammer         <- CV(QN.counts.Hammer, group.Hammer)
  CV.TMM.counts.Hammer        <- CV(TMM.counts.Hammer, group.Hammer)
  CV.DESeq.counts.Hammer      <- CV(DESeq.counts.Hammer, group.Hammer)
  CV.PoissonSeq.counts.Hammer <- CV(PoissonSeq.counts.Hammer, group.Hammer)
  CV.SAMSeq.counts.Hammer     <- CV(SAMSeq.counts.Hammer, group.Hammer)
  
  CV.Hammer <- rbind(CV.counts.Hammer, CV.QN.counts.Hammer, CV.TMM.counts.Hammer, CV.DESeq.counts.Hammer,
                     CV.PoissonSeq.counts.Hammer, CV.SAMSeq.counts.Hammer)
  CV.Hammer$norm.methods <- factor(rep(c("Raw Count", "QN", "TMM", "DESeq", "PoissonSeq", "SAMSeq"),
                                       c(nrow(CV.counts.Hammer), nrow(CV.QN.counts.Hammer), nrow(CV.TMM.counts.Hammer), 
                                         nrow(CV.DESeq.counts.Hammer), nrow(CV.PoissonSeq.counts.Hammer),
                                         nrow(CV.SAMSeq.counts.Hammer))))
  
  win.graph()
  CV.Hammer$norm.methods.A <- sortLvlsByVar.fnc(CV.Hammer$norm.methods, CV.Hammer$condA)
  p <- ggplot(CV.Hammer, aes(x=norm.methods.A, y=condA))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 0.5)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("Control")
  plot1 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  
  CV.Hammer$norm.methods.B <- sortLvlsByVar.fnc(CV.Hammer$norm.methods, CV.Hammer$condB)
  p <- ggplot(CV.Hammer, aes(x=norm.methods.B, y=condB))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 0.5)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("L5 SNL")
  plot2 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  grid.arrange(plot1, plot2, ncol=2)

  ##For Bottomly dataste
  CV.counts.Bottomly            <- CV(counts.Bottomly, group.Bottomly)
  CV.QN.counts.Bottomly         <- CV(QN.counts.Bottomly, group.Bottomly)
  CV.TMM.counts.Bottomly        <- CV(TMM.counts.Bottomly, group.Bottomly)
  CV.DESeq.counts.Bottomly      <- CV(DESeq.counts.Bottomly, group.Bottomly)
  CV.PoissonSeq.counts.Bottomly <- CV(PoissonSeq.counts.Bottomly, group.Bottomly)
  CV.SAMSeq.counts.Bottomly     <- CV(SAMSeq.counts.Bottomly, group.Bottomly)
  
  CV.Bottomly <- rbind(CV.counts.Bottomly, CV.QN.counts.Bottomly, CV.TMM.counts.Bottomly, CV.DESeq.counts.Bottomly,
                       CV.PoissonSeq.counts.Bottomly, CV.SAMSeq.counts.Bottomly)
  CV.Bottomly$norm.methods <- factor(rep(c("Raw Count", "QN", "TMM", "DESeq", "PoissonSeq", "SAMSeq"),
                                         c(nrow(CV.counts.Bottomly), nrow(CV.QN.counts.Bottomly), nrow(CV.TMM.counts.Bottomly), 
                                           nrow(CV.DESeq.counts.Bottomly), nrow(CV.PoissonSeq.counts.Bottomly),
                                           nrow(CV.SAMSeq.counts.Bottomly))))

  win.graph()
  CV.Bottomly$norm.methods.A <- sortLvlsByVar.fnc(CV.Bottomly$norm.methods, CV.Bottomly$condA)
  p <- ggplot(CV.Bottomly, aes(x=norm.methods.A, y=condA))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15)) +ylim(0, 1)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("B6 mouse strain")
  plot1 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  
  CV.Bottomly$norm.methods.B <- sortLvlsByVar.fnc(CV.Bottomly$norm.methods, CV.Bottomly$condB)
  p <- ggplot(CV.Bottomly, aes(x=norm.methods.B, y=condB))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 1)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("D2 mouse strain")
  plot2 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  grid.arrange(plot1, plot2, ncol=2)

  ##For GTEx dataste
  CV.counts.GTEx            <- CV(counts.GTEx, group.GTEx)
  CV.QN.counts.GTEx         <- CV(QN.counts.GTEx, group.GTEx)
  CV.TMM.counts.GTEx        <- CV(TMM.counts.GTEx, group.GTEx)
  CV.DESeq.counts.GTEx      <- CV(DESeq.counts.GTEx, group.GTEx)
  CV.PoissonSeq.counts.GTEx <- CV(PoissonSeq.counts.GTEx, group.GTEx)
  CV.SAMSeq.counts.GTEx     <- CV(SAMSeq.counts.GTEx, group.GTEx)
  
  CV.GTEx <- rbind(CV.counts.GTEx, CV.QN.counts.GTEx, CV.TMM.counts.GTEx, CV.DESeq.counts.GTEx,
                   CV.PoissonSeq.counts.GTEx, CV.SAMSeq.counts.GTEx)
  CV.GTEx$norm.methods <- factor(rep(c("Raw Count", "QN", "TMM", "DESeq", "PoissonSeq", "SAMSeq"),
                                     c(nrow(CV.counts.GTEx), nrow(CV.QN.counts.GTEx), nrow(CV.TMM.counts.GTEx), 
                                       nrow(CV.DESeq.counts.GTEx), nrow(CV.PoissonSeq.counts.GTEx),
                                       nrow(CV.SAMSeq.counts.GTEx))))
  win.graph()
  CV.GTEx$norm.methods.A <- sortLvlsByVar.fnc(CV.GTEx$norm.methods, CV.GTEx$condA)
  p <- ggplot(CV.GTEx, aes(x=norm.methods.A, y=condA))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 1.5)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("Hippocampus tissue")
  plot1 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  
  CV.GTEx$norm.methods.B <- sortLvlsByVar.fnc(CV.GTEx$norm.methods, CV.GTEx$condB)
  p <- ggplot(CV.GTEx, aes(x=norm.methods.B, y=condB))
  p <- p + theme(axis.text.x = element_text(angle = 45, vjust = 1,  size = 12, hjust = 1))
  p <- p + theme(text = element_text(size = 15))+ylim(0, 1.5)
  p <- p + labs(x = "", y= "empirical CV (sd/mean)") + ggtitle("Hypothalamus")
  plot2 <- p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), fill = "darkgoldenrod4", colour = "black")
  grid.arrange(plot1, plot2, ncol=2)
 
 
 #-------------------------------------------------------------------------------------------------------------

#Effect of Normalizations on DGE analysis
##Comparing normalization methods based on Differential Gene expression analysis. (here we used moderated t-test using limma package for DGE analysis)

#---------------------------
#Analysig the data with limma moderated t-test
limma_test <- function(){
  ##DE analysis with CRC AZA datat
  DE.limma.CRC.raw        <- limma.test(counts.CRC, group.CRC)
  DE.limma.CRC.QN         <- limma.test(QN.counts.CRC, group.CRC)
  DE.limma.CRC.TMM        <- limma.test(TMM.counts.CRC, group.CRC)
  DE.limma.CRC.DESeq      <- limma.test(DESeq.counts.CRC, group.CRC)
  DE.limma.CRC.PoissonSeq <- limma.test(PoissonSeq.counts.CRC, group.CRC)
  DE.limma.CRC.SAMSeq     <- limma.test(SAMSeq.counts.CRC, group.CRC)
  
  ##summarysing results
  DE.limma.CRC.class <- merge.data.frame(DE.limma.CRC.raw, merge.data.frame(DE.limma.CRC.QN, 
                                              merge.data.frame(DE.limma.CRC.TMM, 
                                              merge.data.frame(DE.limma.CRC.DE.limmaSeq, 
                                              merge.data.frame(DE.limma.CRC.PoissonSeq, DE.limma.CRC.SAMSeq, 
                                               by="Genes"),  by="Genes"),  by="Genes"),  by="Genes"),  by="Genes")
                                        
  
  DE.limma.CRC.class <- DE.limma.CRC.class[, c(1,6, 11, 16, 21, 26, 31)]
  rownames(DE.limma.CRC.class) <-DE.limma.CRC.class[,1]
  DE.limma.CRC.class <- DE.limma.CRC.class[,-1]
  colnames(DE.limma.CRC.class) <- c("Raw Count", "QN", "TMM", "DE.limmaSeq", "PoissonSeq", "SAMSeq")
  DE.limma.CRC.overlap <- matrix(NA, ncol=6,  nrow=6)
  for(i in 1:6){
    for(j in 1:6){
      DE.limma.CRC.overlap[i,j] <- length(which(DE.limma.CRC.class[,i]==1 & DE.limma.CRC.class[,j]==1))
    }
  }
  
  
  ##DGE analysis with Neuroblastoma datat,20x20
  DE.limma.Zhang.raw        <- limma.test(counts.Zhang, group.Zhang)
  DE.limma.Zhang.QN         <- limma.test(QN.counts.Zhang, group.Zhang)
  DE.limma.Zhang.TMM        <- limma.test(TMM.counts.Zhang, group.Zhang)
  DE.limma.Zhang.DESeq      <- limma.test(DESeq.counts.Zhang, group.Zhang)
  DE.limma.Zhang.PoissonSeq <- limma.test(PoissonSeq.counts.Zhang, group.Zhang)
  DE.limma.Zhang.SAMSeq     <- limma.test(SAMSeq.counts.Zhang, group.Zhang)
  
  
  DE.limma.Zhang.class <- merge.data.frame(DE.limma.Zhang.raw, merge.data.frame(DE.limma.Zhang.QN, 
                                                    merge.data.frame(DE.limma.Zhang.TMM, 
                                                    merge.data.frame(DE.limma.Zhang.DESeq, 
                                                    merge.data.frame(DE.limma.Zhang.PoissonSeq, DE.limma.Zhang.SAMSeq, 
                                                     by="Genes"),  by="Genes"), by="Genes"),   by="Genes"),  by="Genes")

  DE.limma.Zhang.class <- DE.limma.Zhang.class[, c(1,6, 11, 16, 21, 26, 31)]
  rownames(DE.limma.Zhang.class) <-DE.limma.Zhang.class[,1]
  DE.limma.Zhang.class <- DE.limma.Zhang.class[,-1]
  colnames(DE.limma.Zhang.class) <- c("Raw Count", "QN", "TMM", "DESeq", "PoissonSeq", "SAMSeq")
  DE.limma.Zhang.overlap <- matrix(NA, ncol=6,  nrow=6)   #For all genes
  for(i in 1:6){
    for(j in 1:6){
      DE.limma.Zhang.overlap[i,j] <- length(which(DE.limma.Zhang.class[,i]==1 & DE.limma.Zhang.class[,j]==1))
    }
  }
  
  
  
  ##for mRNA only
  DE.limma.Zhang.overlap.mRNA <- matrix(NA, ncol=6,  nrow=6)
  for(i in 1:6){
    for(j in 1:6){
      DE.limma.Zhang.overlap.mRNA[i,j] <- length(which(DE.limma.Zhang.class[mRNA.Zhang,i]==1 & DE.limma.Zhang.class[mRNA.Zhang,j]==1))
    }
  }
  
  ##for lncRNA only
  DE.limma.Zhang.overlap.lncRNA <- matrix(NA, ncol=6,  nrow=6)
  for(i in 1:6){
    for(j in 1:6){
      DE.limma.Zhang.overlap.lncRNA[i,j] <- length(which(DE.limma.Zhang.class[lncRNA.Zhang,i]==1 & DE.limma.Zhang.class[lncRNA.Zhang,j]==1))
    }
  }
  
  #Overlapping of classification
  win.graph()
  par(mfrow=c(2,5))
  d <- DE.limma.CRC.overlap[-1, -1]   #excluding results for raw counts to reduce number of pairs
  for(i in 1:4){
    for(j in (i+1):5){
      venn(setA = d[i,i], setB = d[j, j], both = d[i, j], method = "circle",
           labels = NULL, col = c("cyan", "darkgoldenrod3"))
      print(i)
    }
  }
  
  win.graph()
  par(mfrow=c(2,5))
  d <- DE.limma.Zhang.overlap[-1, -1]  
  for(i in 1:4){
    for(j in (i+1):5){
      venn(setA = d[i,i], setB = d[j, j], both = d[i, j], method = "circle",
           labels = NULL, col = c("cyan", "darkgoldenrod3"))
      print(i)
    }
  }
  
  
  d <- DE.limma.Zhang.overlap.mRNA[-1, -1]  
  for(i in 1:4){
    for(j in (i+1):5){
      venn(setA = d[i,i], setB = d[j, j], both = d[i, j], method = "circle",
           labels = NULL, col = c("cyan", "darkgoldenrod3"))
      print(i)
    }
  }
  
  d <- DE.limma.Zhang.overlap.lncRNA[-1, -1]  
  for(i in 1:4){
    for(j in (i+1):5){
      venn(setA = d[i,i], setB = d[j, j], both = d[i, j], method = "circle",
           labels = NULL, col = c("cyan", "darkgoldenrod3"))
      print(i)
    }
  }
}

